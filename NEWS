2014-04-19: Computation of the Alexander polynomial in two indeterminates for
	surfaces of genus 2.  No canonification procedure is implemented at the moment.
	(2014-05-03) This revealed more tricky than expected, due to the presence of
	the commutator of the two generators in the commutator subgroup.
	Hopefully fixed by sometimes displaying a list of polynomials generating
	the Alexander ideal (not always principal).

2014-04-18: The linking number of a two-component link can be computed (this
	is a conjecture) from the fundamental group of the complement by
	working as if computing the alexander polinomial with one indeterminate
	and then computing its derivative in t=1.

2014-04-08: Computation of the Alexander polynomial for a finitely presented
	group with infinite ciclic commutator quotient, in the case where
	the structural matrix is square (n-1 relators for n generators in the
	preabelian presentation.

2014-03-31: New basic simplification procedure for finitely presented
	groups allow to totally simplify the Ochiai unknot example.
	Added the possibility to directly read a finitely presented group
	from file (an example is added in examples/trefoilknot.fpgroup),
	and to process it with all commands that can deal with fundamental
	groups.
	Interactive mode with option "-i".
	Computation of the preabelian presentation.
	Computation of the invariant factors of the abelianized of a
	finitely presented group.

2011-03-25: It is now possible to compute the fundamental group of
	the surface (not very interesting), of the internal solid set
	(much more interesting) and of the external set.
	This allows in certain cases to distinguish apparent contours
	that cannot be connected by reidemeister-type moves.
	Of course the underlying big problem lies in the extreme
	difficulty in identifying finitely presented groups by
	their presentation.

2010-09-22: added utility "utils/contour_describe.sh" which describes
	verbally the 3D objects corresponding to a contour with huffman
	labelling.

2008-11-13: all inverse rules are now implemented.  See Changelog
	for a bit of help.  Basically, inverse rules have the
	following names: INVN1, INVN2, INVN3, INVN4, INVC1, INVC2
	INVCN1, INVCN1B, INVCN3.  And are typically applied as
	contour rule invxx:n (to apply the nth instance).  The
	list of possible instances can be obtained with the commands:
	- contour listmergearcs|listma (list of INVN? and INVC2)
	- contour listinvc1 (list of INVC1)
	- contour listinvcn1|listswallowtails (list of INVCN1 and INVCN1B)
	- contour listinvcn3|listpunctures (list of INVCN3)
	Script "contour_interact.sh" is adapted to allow use of
	the inverse rules.

2007-07-04: the "mendes graph" of a map of a 2-dimensional manifold
	in R^2 is defined in D. Hacon, C. Mendes de Jesus, and 
        M.C. Romero Fuster, Stable maps from surfaces to the plane 
	with prescribed branching data, Topology and its Applications, 
	154 (2007) 166-175.
	It is now possible to compute this graph for contour with
	Huffman labelling (for which we are able to reconstruct
	the embedding in a canonical way).
	The command is "contour mendes <example>"
	meaning of command switched:
	"--quiet" inhibits the output of some comments
	"--verbose" also prints the description of each mendes node
	by listing the regions+stratum of which it is composed and
	the description of mendes arcs by listing the "extended"
	arcs of the apparent contour
	"--mge [text|pykig|kig]" which king of output to produce:
	  text: default textual description
	  pykig: produces a pykig program that can be processed
	         by pykig.py (kig python interface); the new filter
	         pykig.filter can be used to filter the output
	  kig: produces a kig file that can be used as input by kig
	"--seed <int>" random number generator seed.  It is used
	when initializing the coordinates of the nodes of the graph
	for its graphic representation.

2007-02-28: a "link component" is the union of arcs that are traversed
	when we follow an arc and continue across a node on the arc
	right in front; in this way an apparent contour is a union of
	components, each one being an immersed curve with cusps.
	The "info" command prints the number of such components.

2007-02-20: computation of the third local invariant of Aicardi-Ohmoto
	(First order local invariants of apparent contours, Topology, 
	45 (2006) 27--45).
	It is printed with the "info" command for "contour".
	For contours with huffman labelling (which represent oriented
	surfaces), the number of positive cusps is also computed.

	Now an apparent contour without Huffman labelling can be
	entered.  In the morse description the presence of a cusp
	is indicated by the letter 'c' following the orientation
	indication; in a region description a series of 'c' are written
	in the arc description, one for each cusp.

2007-02-03: region numbering in morse description:
	a "morse description" can now force a numbering for the
	regions (syntax: {tag:<n>}).  This is useful when the region
	numbering is used for some required action (rule application
	or changing the unbounded region...
	When at least one region has a forced tag in the morse description,
	the whole renumbering that would take place after reading is
	disabled (in function postprocesssketch).
	Note that in particular action "print" performes a "canonify"
	before printing, that would itself renumber the regions before
	printing; this can be desabled with the option "--nocanonify".

2007-02-01: new commands and options:
	--darkmatter (or --fi, or --finfinity): set value of f at
	infinity, by default this is zero.
	--nocanonify: inhibit canonification of result for a number
	of commands.
	evert: change the region at infinity to the one with the 
	given "tag" number.
	frontback: invert the depth distance.
        leftright: exchange left with right (completed feb 3).

2007-01-28: added new rule T1 that actually is a sequence C2^{-1} C2 at the
	same place; this is not the identity since when reapplying C2 the
	islands can be replaced differently.

2007-01-28: added option "--transfer_islands" (--ti) that allows to control
	the future location of islands (holes) after application of rules under some
	circumstances.  For examples "C2" applied to "torus3.morse".
	This option is followed by an integer that is interpreted as a sequence
	of bit (from the lowest significant) each bit, if equals one, means
	that the corresponding island has to be transferred to the other region.
	e.g. "contour --ti 1 applyrule c2 torus3.morse".

2007-01-25: presentation of "appcountour" at an Oberwolfach workshop.

2006-10-23: alcuni bug-fix in "contour", specificatamente riguardanti il filtro
	printmorse.

	il programma di appoggio "showcontour" permette di produrre una visualizzazione
	grafica di un contorno apparente a partire da una descrizione morse.

	dopo numerosi tentativi piu' o meno a vuoto, la situazione attuale prevede
	una fase preliminare di ottimizzazione "discreta" in cui il contorno (senza
	cuspidi) e' descritto con una poligonale fatta da segmenti orizzontali o
	verticali di lunghezza unitaria; solo in seguito viene effettuata una rapida
	ottimizzazione a livello continuo con l'introduzione delle cuspidi.

2006-10-05(?): rule CR4 (variants: CR4L CR4R CR4LB CR4RB) is appliable when
	a sequence of 3 consecutive cusps is found which the value of d like
	in d++-, d--+, d+--, d-++.  In the case of CR4R this rule corresponds
	to the sequence C2 (N4)^{-1} N3.
	The first rule creates an S^1, which is then transferred to the
	adjacent region through the arc across the unused cusp.

2006-10-05(?): rule T1 (transfer isles).  This corresponds to a sequence
	C2^{-1} C2, the last applied to the two newly formed cusps.
	Although this seems to be the identity, when we apply C2 we have
	a region that gets splitted in two regions.  If there are "islands"
	in the region we can choose in which of the two new regions this
	should be positioned.  In the end we have the possibility to transfer
	entire islands between two regions.
	The option "--transfer_islands" (or "--ti") allows to specify which
	islands should be transferred.  The value of the option is interpreted
	as a bit mask, each bit corresponds to an island, and if it is equal
	to one the corresponding island must be transferred.

--- from here news are listed in forward cronological order ---

2006-09-21: completata la rule N1
	$ contour applyrule n1 <esempio.morse

	Ora e' possibile leggere descrizioni in formato "sketch",
	ad esempio:

	$ contour applyrule n1 <examples/tre_sfere.morse >risultato.sketch
	$ cat risultato.sketch examples/tre_sfere.morse | contour compare

	(confronta il risultato dell'applicazione della regola n1 con lo 
	schema iniziale)

	$ contour applyrule n1 <examples/tre_sfere.morse | contour countcc

2006-09-21: nuova funzione "countcc" per contare le componenti connesse 
	della superficie di cui si ha il contorno apparente

2006-09-22: nuova funzione "extractcc" che permette di estrarre una 
	particolare componente connessa da uno sketch.  Ad esempio:

	$ contour extractcc 2 <examples/sfera_dietro_toro.morse

	Implementate le rule n2, n3, n4 e n5.

	Nuova funzione "testallrules"

2006-09-26: Nuove rule C1, C2, A1, A2, CN1, CN2L, CN2R, CN2LB, CN2RB, CN3;
	migliorata la canonificazione.
        in "utils" c'e' il programma "knot2morse.c" che permette di
        trasformare la descrizione di un nodo (vedi esempi .knot) in
        una superficie 3D a forma di tubicino.

2006-09-28: Nuova funzione "knot2morse", per costruire una descrizione
	tramite tubicino di un nodo descritto in stile "morse"
	(X maiuscolo e x minuscolo indicano i due diversi modi con
	cui un tratto scavalca l'altro).

	Nuova funzione "characteristic" per il calcolo della caratteristica
	di Eulero della superficie 3D (nel caso sia connessa).

2006-10-03: Completato il set delle rules come nel paper.
	Funziona l'output di una descrizione Morse.
	comando "contour info" per ottenere un po' di statistica sul contorno.

2006-10-05: Nota, la regola N6 e' stata rinominata in CR2 (come nel paper)
