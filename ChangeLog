2018-06-17: knot/link/handlebody-knot name can be used directly on command line.
	This mechanism can be disabled altogether by setting the environment variable
	APPCONTOUR_DISABLEKNFALLBACK to a nonempty value.  Otherwise it allows indication of
	the knot/link/handlebody-knot by using the syntax:

	K<x>_<y>   (knot with Rolfsen/KnotAtlas syntax)
	K<x>a_<y>  (alternating knot with Dowder-Thistlethwaite syntax)
	K<x>n_<y>  (non-alternate knot with DT syntax)
	L<x>a_<y>  (alternating link by Thistlethwaite syntax)
	L<x>n_<y>  (non-alternating link by T syntax)
	HK<x>_<y>  (handlebody-knot as listed in Ishii-Kishimoto-Moriuchi table)

2018-06-17: input file with "knotname {HK<x>_<y>}" now can be used to refer to a handlebody-knot
	(up to 6 crossings).

2018-06-16: Do not print "Warning: result can be noncanonical" when the new algorithm for groebner
	basis is used.

2018-06-15: Handlebody-knots of genus 2 up to six crossings, taken from Ishii-Kishimoto-Moriuchi.
	A handlebody-knot is the result of taking a tubular neighborhood of a trivalent graph in S^3,
	Their diagram can be described using the "knot" description.
	The new knot descriptions are placed in the new directory "examples/handlebody_knots/
	with names like "hk5_2.knot" to indicate the second knot with 5 crossings in the table.

2018-05-24: Computation of the gcd and spread (option --principal) for an ideal is now
	moved in groebner.c and uses long long int.  The new option --factorideal factorizes
	the (nonprincipal) ideal by the gcd of the generators.
	Version is now 2.5.0

2018-05-19: a first implementation of a Groebner basis computation for the second
	elementary ideal for a knot, which is in general not principal.  We do not
	have at the moment a mathematical proof that the implemented procedure gives
	a canonical base, however we espect at least to have the correct spread.
	We still miss comparison with the result after t -> 1/t (although we strongly
	believe that the Alexander ideals are invariant under such change).

2016-06-24: action "knotsum" computes the connected sum of two knots.  Here
	knots means apparent contour of a tubular neighborhood of a knot, in
	the form obtained from a knot description.
	Very few checks are made to ensure that we are in such situation.

2016-06-21: allow for links with three components (no canonify at present).
	Bump to version 2.4.0

2016-06-13: input a knot by its gauss code.  It is simply converted to the corresponding dtcode.
	(see tests/test.37 for an example).
	Allow for gauss code of a link (using a trick that allows to use the Dowker-Thistlethwaite code.
	Allow to enter a link by its "Dowker-Thistlethwaite" name

2016-06-08: new command "foxjacobian" to compute the fox derivatives of a presentation
	(see fox.c source code).

2016-06-03: allow for extra information in a dt-code.  This can alleviate the exponential-time problem
	in the diagram reconstruction.  See example examples/knots/hardunknot_haken_satellite.dtcode

2016-06-01: bump version to 2.3.1.

2016-05-30: input syntax "knotname {<knotscape-name>}" is now allowed.  <knotscape-name> is something
	like "15n_1234" to mean the 1234-th non-alternating knot with 15 crosses.  For this to work it is
	necessary to have knotscape installed in some standard place, or at least the 'pak' files in a
	directory named knotTable (see "readdtcode.c" for a complete list of searched places).

2016-05-25: Module to decode the dt-code of Dowker-Thistlethwaite, input description can now also take
	the form "dtcode {[x x x x]}".

2016-05-23: New option --maxd computes the d-th elementary ideal of a knot with d computed as n-1 where
	n is the dimension of the presentation matrix.  Useful to get information about the Nakanishi index.

2016-05-18: Added the computation of the second elementary ideal for the 'knot' case (i.e. outside
	of a tubular neighborhood of a knot).
	This leads to a fundamental group having the commutator quotient group of rank 1 (and torsion-free),
	and a presentation of deficiency 1.
	the second elementary ideal is computed (--foxd 2) by taking the determinants of all matrices of
	codimension 1 in the (square) presentation matrix as generators.
	Since the ring of Laurent polynomials with integral coefficients is *not* a principal domain, we have
	the problem of simplifying the set of generators of the ideal.  The implemented procedure does not
	guarantee to end up with a canonical representative, although it gived a nice result in the tested cases.
	It however might suffer of exponential increase in the size of the integer coefficients leading
	to integer overflow (the software uses 32-bit representation for integers).

	The new option:

	  contour --principal

	forces the construction of the smallest *principal* ideal that contains the second elementary ideal.
	This is generated by the GCD of a generating set, which is well-defined in our context (See Crowell-Fox).
	An integral multiple (spread) of the GCD is computed such that the generated ideal is contained in
	the second elementary ideal.
	At present the computed "spread" is not guaranteed to be the optimal (smallest) one.
	Examples of these new features can be found in tests:

	  ./tests/test.28  through  ./tests/test.31


2016-05-08: Version 2.3.0.  It might rarely happen that the computed presentation of the group does not have
	the expected deficiency.  This is not the case right after the initial construction of
	the presentation (due to the present of cavities with the topology of a sphere).
	Suitable surgeries of "punchhole" type applied to the surface does not change the
	fundamental group of the solid set E, and if repeatedly applied they remove all ball-shaped
	cavities.  An example is given by "./utils/kanenobu.sh 1 3".

	The new command:

	  contour suggest_p_surgery

	scans the 3D surface in search of a punchhole surgery that does not change the fundamental
	group of the solid set E (inside of the surface).

	If the alexander polynomial computation is not possible due to having a presentation with the
	wrong deficiency a warning is displayed with a suggestion about how to work around the problem.

	The new option:

	  contour --autosurgery

	automatically applies the correct punchhole surgeries (but only if the user is interested in the
	fundamental group or constructions depending on the fundamental group).
	test "tests/test.27" gives an example of using the new features.
	"autosurgery" is *not* on by default, since it often happens that the resulting fundamental
	group presentation, although guaranteed to have the correct deficiency, is more complex.

2014-04-20: Version 2.2.0. Alexander polynomial in two indeterminates.

2014-04-08: Version 2.1.0. Various improvements concerning the fundamental groups
	including the computation of the Alexander polynomial for tubular knots.
	provided examples include:
	examples/conway.knot, examples/kinoshita_terasaka.knot, examples/ochiai_unknot.knot
	examples/knots (Rolfsen table, up to 7 crossings)
	examples/links (Rolfsen table, two examples)
	computing the linking number for two-components links assuming it is the
	(absolute value) of the derivative of the Alexander polynomial with one
	indeterminate.

2013-09-12: Version 2.0.1. Cleanup of various parts related to the introduction
	of the new canonization procedure.

2013-09-10: Version 2.0.0. Implemented "giovecanonify".  This is finally a
	*good* canonification process (its complexity is n^2, which is not
	optimal but good enough).
	Suggested by Giovanni Paolini, it is based on a natural DFS traversing
	strategy for the graph that only depends on the choice of one of the
	external arcs (for each connected component).
	This now can completely substitute the previous canonification and makes
	the "supercanonify" obsolete.
	The new "--oldcanonify" option can now be used to force the use of the
	old canonification process (for compatibility reasons).

2012-08-02: Implemented "supercanonification" command.  It fully checks for
	the optimal representative among all equivalent region descriptions.
	Unfortunately the algorithm has exponential complexity, has can
	be checked with example/simpleknot.knot, for which the complexity
	has order 12! 6! 6! (of order 10^{15}).

2012-07-30: version increased to 1.3.0.

2011-09-10: When reading a region description (*.sketch) make sure that the
	order of arcs and regions is maintained. This is important especially
	since canonification does not always behave like it should.
	This modification at least makes canonification idempotent
	Otherwise it was possible that successive canonifications would
	swap between two different region descriptions!
	The example is examples/torus_twist.morse.
	Still, unfortunately, canonification does not always produce the same
	representative, i.e. two equivalent descriptions can produce
	different "canonical" representatives.

2011-09-06: Better handling of arguments pointing to packaged examples.
	a command like "contour print <example>" will search the description
	in this order:
	./example   (in current directory)
	<prefix>/share/appcontour/examples/example
	<prefix>/share/appcontour/examples/example.morse
	<prefix>/share/appcontour/examples/example.sketch
	<prefix>/share/appcontour/examples/example.knot
	<prefix>/share/appcontour/examples/immersed/example
	<prefix>/share/appcontour/examples/immersed/example.morse
	<prefix>/share/appcontour/examples/immersed/example.sketch
	<prefix>/share/appcontour/examples/immersed/example.knot
	Also, now actions compare, union and sum accept two arguments
	containing each contour description.  If only one argument is
	given, then the corresponding file must contain both descriptions.

2011-08-28: Huffman labelling renamed simply "labelling".  Added automatic canonification
	after most of the surgeries.  It can be disabled with the --nocanonify option.

2011-08-12: Ohmoto-Aicardi invariants renamed into "First order Vassiliev invariants".

2011-04-05: Install examples in <prefix>/appcontour/examples, search that
	directory for contour description if not found in current directory.

2011-03-26: The knot description now also allows for Y junctions
	(and the equivalent upside-down 'h' junction).

2011-03-25: Computation of the fundamental group of the surface,
	the internal solid set and the external set.
	This is obtained with the new commands:
	"fundamental" "insidefundamental" "outsidefundamental".
	Example:
	-----------------------------------------------------------------
	$ ./contour insidefundamental examples/painted_klein_bottle.morse 
	Finitely presented group with 3 generators
	<a,b,c; aCAcBCb>
	-----------------------------------------------------------------

2011-03-20: Implemented computation of a cell complex corresponding
	to the surface, or to the internal solid set, or to the
	external set.  Commands:
	"cellcomplex" "insidecomplex" "outsidecomplex"

2010-09-25: new actions:
        "ccorientation <ccid>" computes the orientation of a single
        component <ccid>.  E.g. for a hollow sphere one of the two
	spheres is positively oriented, the other is negatively oriented.
        "ccparent <ccid>" displays which connected component directly
        contains component <ccid>, "None" if <ccid> is an external
	component.
	"ccordering" prints the complete partial containment ordering
	scheme among the 3D connected components.  E.g. a result like
	{4 6{5{1} 2 3}} means that components 4 and 6 are external;
	5, 2 and 3 are directly contained in component 6; component
	1 is directly contained in component 5.

2010-08-28: contour now accepts a morse description in which cusps are
	given as morse events, rather than arc properties.  This is
	motivated by the output of the program "visible" that computes
	a contour with a given visible part.

2009-03-16: fixed allocation problem in canonifyarc 
	an S1 without cusps has dvalues=1 but should not be canonify

2008-11-24: fixed gluearcs/pinchneck for contours without huffman
	labelling.

2008-11-20: new names for simple rules (and their inverse) is now
	the default.  The environment variable "APPCONTOUR_OLDNAMES"
	can be set to a nonempty value to force use of old names
	(or use the option --oldnames).  Here is the correspondence:
	K0    = N4  (tangency)
	K1    = N2
	K1B   = N3
	K2    = N1
	T     = N5  (triple point)
	L     = C1  (lip)
	B     = C2  (beak-to-beak)
	S     = CN1 (swallowtail)
	C     = CN3 (cusp-crossing)

	TI    = T1  (transfer-island)
	CR0L  = CN2L
	CR0R  = CN2R
	CR0LB = CN2LB
	CR0RB = CN2RB

2008-11-16: added cut&paste: add sphere (add a positive S1)
	punch hole (add a negative S1), commands are respectively
	"addsphere" and "punchhole" (option -r x:y must be used
	to indicate region and dvalue.
	Added "removehole", which is the reverse of punchhole.
	Action "listholes" lists all region that are the inside
	of some hole.

2008-11-14: fixed a couple of bugs.

2008-11-12: rule invcn1 (creation of a swallowtail) and rule
	invcn3 (puncture).
	command "listinvcn1" ("listswallatails") or command
	"listinvcn3" ("listpunctures") show all applicable
	instances.  Rules can be applied with commands
	"swallowtail" or "puncture" and passing arc (arcs)
	information with option -a.
	Alternatively "rule invcn1:n" or "rule invcn3:n" applies
	the n-th instance.
	Also "rule invcn1b:n" is implemented which implements the
	specular version of invcn1.

2008-11-12: rule invc1 (creation of a wrinkle) is now implemented.
	command "listwr" show all applicable instances,
	command "-r r:s wrinkle" wrinkles stratum s of region r
	command "rule invc1:n" applies the n-th instance of
	rule invc1 (wrinkle).
	contour_interact.sh is also updated.

2008-11-08: the first set of inverse rules is now implemented.
	command "mergearcs" lists all applicable rules inverse
	of N1, N2, N3, N4, C2 (they are all a kind of merge of
	two arcs of the boundary of some region.
	command "rule" (which is now an abbreviation of "applyrule")
	can be used to apply such rules.
	Command "mergearcs" can also be used, by specifying the
	region (option -r) and the two arcs (option -a, twice)
	where the rule should be applied.

2007-07-04: the computation of the mendes graph is now finally working.
	The name of the graph was changed from "hacon" to "mendes"
	as for suggestion of the authors.
	(see NEWS file for command-line description).
	We still need to improve the graphical presentation
	in formats like "kig" or "xfig".

2007-06-15: now contour can directly operate on "knot" descriptions
	(it was only possible to convert knot to morse).  This
	is done by forking contour and using a pipe.  This only
	works on a unix environment.

2007-06-13: showcontour can now deal with most of the new
	extensions for the morse description, specifically, inheritance
	of orientation across arcs and recognition of the X' and X`
	variants for bridged crossings.

2007-06-06: added folder "gtkcontour" (Pasquarelli) holding the
	project for a graphical frontend to contour.

2007-05-07: commands "iscontour" and "ishuffman" check a given
	morse (or region) description for consistency as an
	apparent contour without/with huffman labelling.

2007-04-25: allowing inheritance of arc orientation across nodes (in
	morse definition).

2007-03-02: fixed wrong computation of ohmoto invariant, 3D connected
	components and euler characteristic when f is not zero at
	infinity.  This can be forced by using option "--fi".
	In this case the surface is thought as projected onto an
	S^2 (compactified R^2 with the addition of the point at
	infinity).

2007-02-28: counting number of link components in the apparent contour
	(displayed with the "info" command).

2007-02-20: see NEW for a list of changes related to the Oberwolfach workshop.

2006-10-27: bump version to 0.8, preparing for a distribution.

2006-10-23: nuovo programma per la visualizzazione grafica di un
	contorno apparente.
	Utilizzabile anche da "utils/contour_interact.sh"

2006-10-05: la regora N6 e' ora diventata CR2 (come nel paper)

2006-10-03: finalmente e' possibile costruire una descrizione di morse
	a partire da una region description

2006-09-26: possibilita' di specificazione nomefile come secondo argomento.
	Nuove rule A1 e A2 (rimuovi regione ad anello).
	Nuove rule N6, CN1, CN2L, CN2R, CN2LB, CN2RB, CN3

	Nuova funzione "knot2morse"; con alcuni esempi in 'examples'

2006-09-21: errore nel controllo dei valori di d in un
	nodo.  I 4 valori sono controllati correttamente,
	ma l'arco in cui d salta di due ha una direzione
	di crescita di d che non veniva controllato.

	Completata la rule n1 e aggiunte le regole n2, n3, n4,
	che possono essere chiamate anche come (ad es)
	n1:3 per indicare l'applicazione della regola 1 solo
	al terzo match.

	Nuova funzione testallrules

	Nuova funzione countcc (vedi NEWS), lettura formato 'sketch'

	Nuova rule N5
	Nuove rule C1 e C2

